Metadata-Version: 2.4
Name: jcat
Version: 0.1.0
Summary: A fast and lean CLI for interacting with the Jules API.
Home-page: https://github.com/example/jcat
Author: Jules
Author-email: jules@example.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: questionary
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# jcat: The Unofficial, Interactive CLI for Jules

`jcat` is a fast, lean, and powerful command-line interface for the Jules API. It's designed for developers who want to interact with Jules agents directly from the terminal, providing an interactive, chat-focused experience that complements the official Jules Tools.

## Purpose

While the official `jules` CLI is excellent for orchestrating and managing remote tasks, `jcat` focuses on the conversational aspect of working with an AI agent. It allows you to have a full, real-time conversation—creating sessions, sending messages, and following the agent's activity feed—all without leaving your command line. This makes it ideal for quick interactions, debugging, and staying in the loop with an agent's progress.

## Features

- **Full Session Control**: Create, list, and manage sessions.
- **Real-time Activity Streaming**: Follow along with the agent's work as it happens.
- **Interactive Mode**: A user-friendly, menu-driven interface for managing sessions.
- **Direct Messaging**: Chat with the Jules agent directly from your terminal.
- **Simple Configuration**: A one-time setup for your API key, with support for environment variables.
- **Lightweight & Fast**: Built in Python with minimal dependencies (`requests` and `questionary`).

## Installation

1.  **Clone the repository:**
    ```bash
    git clone <repository_url>
    cd jules-gui
    ```

2.  **Install dependencies:**
    ```bash
    pip install -r requirements.txt
    ```

## Configuration

`jcat` needs a Jules API key to function. You can get your key from the [Jules settings page](https://jules.google.com/settings#api).

There are two ways to configure the API key:

1.  **Environment Variable (Recommended):**
    Set the `JCAT_API_KEY` environment variable. This is the most secure method and is recommended for CI/CD environments.
    ```bash
    export JCAT_API_KEY="YOUR_JULES_API_KEY"
    ```
    `jcat` will automatically use this key if the variable is set.

2.  **Configuration File:**
    If you prefer, you can use the built-in config command. This will store your key in a plain text file at `~/.jcat_config.json`.
    ```bash
    python jcat.py config set api_key YOUR_JULES_API_KEY
    ```

**Note:** The `JCAT_API_KEY` environment variable takes precedence over the configuration file.

## Usage

`jcat` provides several commands to interact with the Jules API.

### `config`
Manage your local configuration.

- **Set your API key:**
  ```bash
  python jcat.py config set api_key YOUR_JULES_API_KEY
  ```

### `sources`
Manage your code sources.

- **List available sources:**
  ```bash
  python jcat.py sources list
  ```

### `session`
Manage your interactive sessions.

- **List recent sessions:**
  ```bash
  python jcat.py session list
  ```

- **Create a new session:**
  ```bash
  python jcat.py session new "My awesome new feature" --source "sources/github/your-org/your-repo"
  ```
  You can also specify a branch and a title:
  ```bash
  python jcat.py session new "Fix the login bug" \
    --source "sources/github/your-org/your-repo" \
    --branch "hotfix/login-bug" \
    --title "Bugfix: Login"
  ```

- **Follow a session's activity feed:**
  This is `jcat`'s killer feature. It streams all messages, plans, and progress updates to your terminal in real-time. Press `Ctrl+C` to exit.
  ```bash
  python jcat.py session follow <session_id>
  ```

- **Send a message to a session:**
  ```bash
  python jcat.py session message <session_id> "Can you also add a unit test for that?"
  ```

- **Start an interactive session:**
  For a more user-friendly experience, use the interactive mode to choose a session from a list. It displays recent sessions and their latest activity, allowing you to select one to follow or send a message to.
  ```bash
  python jcat.py session interactive
  ```
